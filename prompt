// SignUp.js
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { FiEye, FiEyeOff } from "react-icons/fi";
import { useDispatch, useSelector } from 'react-redux';
import { addUser, selectUserArray } from '../app/features/user/UserSlice';

const SignUp = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const userArray = useSelector(selectUserArray);
  const [show, setShow] = useState(false);
  const [show1, setShow1] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
  });
  const [passwordMatchError, setPasswordMatchError] = useState(false);

  const handleChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!formData.name || !formData.email || !formData.password || !formData.confirmPassword) {
      alert("Please fill in all fields before submitting");
      return;
    }

    if (formData.password !== formData.confirmPassword) {
      setPasswordMatchError(true);
      return;
    } else {
      setPasswordMatchError(false);
    }

    const userObject = {
      name: formData.name,
      email: formData.email,
      password: formData.password,
      confirmPassword: formData.confirmPassword,
    };

    await dispatch(addUser(userObject));

    navigate('/detail');
  };

  const togglePasswordVisibility = () => {
    setShow(!show);
  };

  const togglePasswordVisibility1 = () => {
    setShow1(!show1);
  };

  return (
    <div className="flex min-h-full flex-1 flex-col justify-center px-6 py-5 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-sm">
        {/* <img
          className="mx-auto h-10 w-auto"
          src="https://tailwindui.com/img/logos/mark.svg?color=blue&shade=600"
          alt="Your Company"
        /> */}
        <h2 className="mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900">
          SignUp to create your account
        </h2>
      </div>
      <div
        className="mt-10 sm:mx-auto sm:w-full sm:max-w-sm"
        onSubmit={handleSubmit}
      >
        <form className="space-y-3" action="#" method="POST">
          <div>
            <label
              htmlFor="name"
              className="block text-sm font-medium leading-6 text-gray-900"
            >
              Full Name
            </label>
            <div className="mt-2">
              <input
                id="name"
                name="name"
                type={"text"}
                autoComplete={"text"}
                value={formData.name}
                onChange={handleChange}
                className="block w-full  border-2 border-gray-500 py-1.5 text-gray-900 focus:ring-blue-500 sm:text-sm"
              />
            </div>
          </div>
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium leading-6 text-gray-900"
            >
              Email address
            </label>
            <div className="mt-2">
              <input
                id="email"
                name="email"
                type={"email"}
                autoComplete="email"
                value={formData.email}
                onChange={handleChange}
                className="block w-full  border-2 border-gray-500 py-1.5 text-gray-900 focus:ring-blue-500 sm:text-sm"
              />
            </div>
          </div>
          <div>
            <div className="flex items-center justify-between">
              <label
                htmlFor="password"
                className="block text-sm font-medium leading-6 text-gray-900"
              >
                Password
              </label>
            </div>
            <div className="mt-2 relative">
              <input
                id="password"
                name="password"
                type={show ? "text" : "password"}
                autoComplete="current-password"
                value={formData.password}
                onChange={handleChange}
                className="block w-full  border-2 border-gray-500 py-1.5 text-gray-900 sm:text-sm"
              />
              <button
                type="button"
                className="absolute right-0 top-0 mt-3 mr-3"
                onClick={togglePasswordVisibility}
              >
                {!show ? (
                  <FiEyeOff className="text-blue-500" />
                ) : (
                  <FiEye className="text-blue-500" />
                )}
              </button>
            </div>
          </div>
          <div>
            <div className="flex items-center justify-between">
              <label
                htmlFor="confirmPassword" 
                className="block text-sm font-medium leading-6 text-gray-900"
              >
                Confirm Password
              </label>
            </div>
            <div className="mt-2 relative">
              <input
                id="confirmPassword" 
                name="confirmPassword" 
                type={show1 ? "text" : "password"}
                autoComplete="current-password"
                value={formData.confirmPassword}
                onChange={handleChange}
                className="block w-full border-2 border-gray-500 py-1.5 text-gray-900 sm:text-sm"
              />
              <button
                type="button"
                className="absolute right-0 top-0 mt-3 mr-3"
                onClick={togglePasswordVisibility1}
              >
                {!show1 ? (
                  <FiEyeOff className="text-blue-500" />
                ) : (
                  <FiEye className="text-blue-500" />
                )}
              </button>
            </div>
          </div>
          <div>
          {passwordMatchError && (
            <p className="text-red-500">Passwords must be match.</p>
          )}
        </div>
          <div>
            <button
              type="submit"
              className="flex w-full justify-center  bg-blue-500 px-3 py-1.5 text-sm font-semibold leading-6 text-white hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500"
            >
              Create your account
            </button>
          </div>
        </form>

        <p className="mt-2 text-center text-sm text-gray-500">
          Already have an account?{" "}
          <Link
            to="/login"
            className="font-semibold leading-6 text-blue-500 hover:text-blue-500"
          >
            Login
          </Link>
        </p>
      </div>
    </div>
  );
};
export default SignUp;

// Login.js

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { FiEye, FiEyeOff } from 'react-icons/fi';
import { useDispatch, useSelector } from 'react-redux';
import { loginUser, selectUserArray } from '../app/features/user/UserSlice';

const Login = () => {
  const dispatch = useDispatch();
  const userArray = useSelector(selectUserArray);

  const [show, setShow] = useState(false);
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });

  const togglePasswordVisibility = () => {
    setShow(!show);
  };

  const handleChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    const user = userArray.find((u) => u.details.email === formData.email);
    if (user && user.details.password === formData.password) {
      // Set loggedInUserId in localStorage
      dispatch(loginUser(user.id));
    } else {
      alert('Invalid email or password');
    }
  };


  return (
    <div className="flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-sm">
        <h2 className="mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900">
          Sign in to your account
        </h2>
      </div>
      <div className="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
        <form className="space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="email" className="block text-sm font-medium leading-6 text-gray-900">
              Email address
            </label>
            <div className="mt-2">
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                onChange={handleChange}
                className="block w-full  border-2 border-gray-500 py-1.5 text-gray-900 focus:ring-blue-600 sm:text-sm"
              />
            </div>
          </div>
          <div className="mt-4">
            <label htmlFor="password" className="block text-sm font-medium leading-6 text-gray-900">
              Password
            </label>
            <div className="mt-2 relative">
              <input
                id="password"
                name="password"
                type={show ? 'text' : 'password'}
                onChange={handleChange}
                autoComplete="current-password"
                className="block w-full  border-2 border-gray-500 py-1.5 text-gray-900 sm:text-sm"
              />
              <button
                type="button"
                className="absolute right-0 top-0 mt-3 mr-3"
                onClick={togglePasswordVisibility}
              >
                {!show ? <FiEyeOff className='text-blue-500' /> : <FiEye className='text-blue-500'/>}
              </button>
            </div>
          </div>
          <div>
            <button
              type="submit"
              className="flex w-full justify-center  bg-blue-500 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600"
            >
              Sign in
            </button>
          </div>
        </form>
        <p className="mt-10 text-center text-sm text-gray-500">
          Not a member?{' '}
          <Link to="/signup" className="font-semibold leading-6 text-blue-500 hover:text-blue-500">
            Sign Up
          </Link>
        </p>
      </div>
    </div>
  );
};

export default Login;

// Store.js

import { configureStore } from '@reduxjs/toolkit';
import { userSlice, selectLoggedInUserId } from './features/user/UserSlice';

export const store = configureStore({
  reducer: {
    user: userSlice.reducer,
  },
});
const storedUsers = localStorage.getItem('users');
if (storedUsers) {
  store.dispatch(userSlice.actions.addUser(JSON.parse(storedUsers)));
}
export const selectLoggedInUser = (state) => {
    const loggedInUserId = selectLoggedInUserId(state);
  return state.user.users.find((user) => user.id === loggedInUserId);
};

// UserSlice.js

import { createSlice } from '@reduxjs/toolkit';
import { nanoid } from 'nanoid';

const initialState = {
  users: [],
  loggedInUserId: null,
};

export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    addUser: (state, action) => {
      const user = {
        id: nanoid(),
        details: action.payload,
      };
      state.users.push(user);
      localStorage.setItem('users', JSON.stringify(state.users));
    },

    // removeUser: (state, action) => {
    //   state.users = state.users.filter((user) => user.id !== action.payload);
    // },
    loginUser: (state, action) => {
      state.loggedInUserId = action.payload;
    },
  },
});

export const selectUserArray = (state) => state.user.users;
export const selectLoggedInUserId = (state) => state.user.loggedInUserId;

export const selectLoggedInUser = (state) => {
  const loggedInUserId = state.user.loggedInUserId;
  return state.user.users.find((user) => user.id === loggedInUserId);
};

export const { addUser, removeUser, loginUser } = userSlice.actions;
export default userSlice.reducer;

// App.js

import React from "react";
import { Routes, Route, Navigate } from "react-router-dom";
import Login from "./auth/Login";
import SignUp from "./auth/SignUp";
import Detail from "./Detail";
import Home from "./Home";
import { useSelector } from "react-redux";
import { selectLoggedInUser } from "./app/features/user/UserSlice";

const App = () => {
  const loggedInUserId = useSelector(selectLoggedInUser);

  return (
    <Routes>
      <Route path="/" element={<Home />} />
      <Route
        path="/login"
        element={!loggedInUserId ? <Login /> : <Navigate to="/detail" />}
      />
      <Route path="/signup" element={<SignUp />} />
      <Route
        path="/detail"
        element={
          loggedInUserId ? <Detail /> : <Navigate to="/login" />
        }
      />
    </Routes>
  );
};

export default App;

// index.js

import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router } from 'react-router-dom';
import { Provider } from 'react-redux';
import { store } from './app/Store';
import App from './App';
import './index.css';

ReactDOM.render(
  <React.StrictMode>
    <Provider store={store}>
      <Router>
        <App />
      </Router>
    </Provider>
  </React.StrictMode>,
  document.getElementById('root')
);

// Detail.js

import React from "react";
import { useSelector } from "react-redux";
// import { Link, Navigate } from "react-router-dom";
import { selectLoggedInUser } from "./app/features/user/UserSlice";

const Detail = () => {
  const loggedInUser = useSelector(selectLoggedInUser);

  return (
    <div>
      {loggedInUser && (
        <div className="bg-white flex flex-col items-center justify-center h-screen">
          <div className="p-10 bg-gray-100 shadow-lg">
            <h1 className="font-bold text-4xl text-gray-900 mb-4">Welcome!</h1>
            <div>
              <p className="font-bold text-lg text-blue-500 mt-4">Your Name:</p>
              <div className="p-2 bg-gray-200">
                <p className="text-md text-gray-900">
                  {loggedInUser.details.name || ""}
                </p>
              </div>
            </div>
            <div>
              <p className="font-bold text-lg text-blue-500 mt-4">
                Your Email:
              </p>
              <div className="p-2 bg-gray-200">
                <p className="text-md text-gray-900">
                  {loggedInUser.details.email || ""}
                </p>
              </div>
            </div>
            <div>
              {/* <Navigate to={'/login'}>
              <p>LogOut</p>
              </Navigate> */}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Detail;


there are the following issues in this code, can you fix it?

1. When we reload the page it removes all data from localstorage
2. if the user providing email is already exsist in the state during signing Up, never allow to sign up show the alert "this email is already exsist".
3. create logout button with logout functionalities
